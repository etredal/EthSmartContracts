pragma solidity 0.6.6;

import "https://raw.githubusercontent.com/smartcontractkit/chainlink/master/evm-contracts/src/v0.6/VRFConsumerBase.sol";

//Compile with Injected Web3
//Use MetaMask to insert LINK from Kovano Test Network with Contract's address.
contract Lottery is VRFConsumerBase {
    //Lottery
    address payable manager;
    uint32 public chance = 5; // So 1 in 5
    uint32 public entryFee = 100;
    uint8 public percentFee = 10; //%
    
    // Stay the same unless changed
    uint32 private chanceChange = 5;
    uint32 private entryFeeChange = 100;
    uint8 private percentFeeChange = 10;

    // randomness seed    
    uint256 public seed = 1138;
    
    //VRF
    bytes32 internal keyHash;
    uint256 internal fee;
    
    uint256 public randomResult;
    
    /**
     * Constructor inherits VRFConsumerBase
     * 
     * Network: Kovan
     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9
     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088
     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4
     */
    constructor() 
        VRFConsumerBase(
            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator
            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token
        ) public
    {
        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;
        fee = 0.1 * 10 ** 18; // 0.1 LINK
        
        manager = msg.sender;
    }
    
    /** 
     * Requests randomness from a user-provided seed
     */
    function getRandomNumber(uint256 userProvidedSeed) public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with faucet");
        return requestRandomness(keyHash, fee, userProvidedSeed);
    }

    /**
     * Callback function used by VRF Coordinator
     */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        randomResult = randomness;
        
        lotteryResult();
    }
    
    // Lottery Functions
    function changeChanceNextPrizePool(uint32 _chanceChange) public restricted {
        chanceChange = _chanceChange;
    }
    
    function changeEntryFeeNextPrizePool(uint32 _entryFeeChange) public restricted {
        entryFeeChange = _entryFeeChange;
    }
    
    function changePercentFeeNextPrizePool(uint8 _percentFeeChange) public restricted {
        require(_percentFeeChange > 0 && _percentFeeChange < 100);
        percentFeeChange = _percentFeeChange;
    }
    
    function changeSeed(uint256 _seed) public restricted {
        seed = _seed;
    }
    
    function getPrizePool() public view returns(uint256 balance) {
        return (payable(address(this))).balance;
    }
    
    function lottery() public payable {
        require(msg.value >= entryFee);
        
        manager.transfer(uint(msg.value * percentFee) / 100);
        
        getRandomNumber(seed);
        
        // In FulfillRandomness is the resulting lottery decision
    }
    
    function lotteryResult() private {
        if (randomResult % chance == 0) {
            msg.sender.transfer(address(this).balance);
            
            chance = chanceChange;
            entryFee = entryFeeChange;
            percentFee = percentFeeChange;
        }
    }
    
    // restrict to only the manager (the contract creator)
    modifier restricted() {
        require(msg.sender == manager);
        _;
    }
}
